#CELL NUMBER / PROTEIN DISTRIBUTIONS
#___________________________________

#vector in formate [[<range start>,<range end>], <number of different proteins in this range>] seperated by ;
#for the inirange we can only change ONE START and ONE END VALUE for ONE range indicated with an X (e.g. one RANGE START: [[1,2],3];[[X,Y],2])
#the values for X and Y are geiven, seperated by a ';'

#example varying number of high proteins
ProteinLevels=[[[750,800],0];[[200,300],30];[[10000,15000],X]]
ProteinLevelsINIRANGE=0,2,1

#example for a varying range
#ProteinLevels=[[[750,800],2];[[200,1000],10];[[X,Y],1]]
#ProteinLevelsINIRANGE=900,30000,15000;901,30001,15000

#size parameter for the negBinom distributions of the proteins
size=3.5
CellNumber=500

#random (gaussian dist) noise that is applied randomly to every protein count in every single cell (len(single cell*protein) different factor)
#noise is the width of a normal dist, that samples a factor to multiply the ab_count
noise=0.05
#noiseINIRANGE=0.01,1,0.01
#proteinNoise (len(protein) different factors): noise like above, but this is a protein specific noise. E.g., protein X has more noise than protein Y, therefore firstly 
#protein counts are multiplied with the same factor for same protein here, afterwards to above noise is applied for every individual
#count
proteinNoise=0.1
#proteinNoiseINIRange=0.1,0.9,0.05

#AB DUPLICATE SIMULATION (POTENTIAL NORMALIZATION)
#___________________________________
#if dubplicated ABs should be used -> increases total number of ABs
abDuplicates=1
#factor for differences between ABs within this range
abDuplicateRange=[1,1]
#we disturb the duplicate AB counts in the following way
#1.) multiply with a random value between abDuplicateRange 2.) put gaussian noise around this value, 
#sigma of this gaussDist is the abDuplicateDisturbance * <above calculated new ABcount>abDuplicateDisturbance=0.1
#parameter for Sampling of AntiBodyBinding: sample <number sampled ABs per smaple> elements from the data  (<number sampled ABs per smaple> = <protein count per sample> * <abBindingEfficiency>)
abBindingEfficiency=0.9

#SEQUENCING DEPTH SIMULATION
#___________________________________
#library size, first value mean, second std (new implementation: removed range of libsize values, sampled from log. normal dist)
libSize=[10,0.5]
#parameter for the iniFile construction, for each iniFile a new libSize line is generated in the format libSize=[1,range(X,Y,Z)] (pythonrange: from X toY with steps Z)
#format:<libSizeRange=X,Y,Z>
#libSizeINIRANGE=1,4

#THIS IS CURRENTLY COMMENTED OUT, BUT CAN BE ENABLED AGAIN
#IT SHOULD THEN BE USED INSTEAD OF LIBSIZE (fixed factors of libsize effect)
#THIS SIMULATES PCR CYCLES, CAPTURE, AMPLIFICATION TO INTRODUCE LIBSIZE EFFECTS (which is not totally true bcs pcr could be hadnled
#by UMIs...)
#PCR PARAMETERS
pcrCycles=2
pcrCapture=0.8
#parameter for Sampling of PCRAmplification+Sequencing: sample <number sampled UMIs> elements from the data ( <number sampled UMIs> = <unique UMIs> * <seqAmplificationEfficiency>)
seqAmplificationEfficiency=0.6


#BATCH EFFECT
#___________________________________
#list of factors for the batches, the factor states how much the proteinCounts deviate from thre ground truth
#every sample (cell) is randomly assigned to one of the batches with len(batches)==len(batchFactors)
batchFactors=1,0.7

#CORRELATIONS
#___________________________________
#correlations are drawn from multiple gaussian dist: e.g. mean=0, std = 0.2 for 30 protein pairs
#all the missing pairs are drawn from proteinCorrelationsMean, proteinCorrelationsStd to fill up correlations
#INIRANGE is same as ProteinLevels and can have TWO PARAMETERS (in case we want to change two dist., or mean and std,...)
proteinCorrelationDists=[[0,0.2,30];[0.5,0.1,X]]
proteinCorrelationMean = 0.0
proteinCorrelationStd = 0.4
proteinCorrelationDistsINIRANGE=0,2,1

#CLUSTERS
#___________________________________
#clusters are defined by a bunch of proteins that are drawn from different distirbutions per cluster
#with potentially different correlations
#BE AWARE: the abundanceFactors scale all proteins in the same way, it is not drawn from a distribution
#however, we want to use this only to model how e.g. clsuters of stronger signalling, etc. effect norm.
#for more complicated clusters (continuous, not all protein sclaed similarly) use another scRNAseq framework
numberProteins=[2,5,10]
abundanceFactors=[1.2, 1.5, 2]

correlationSets=[[0,1];[1];[1]]
correlationFactors=[1.2,1.3,1.5]

additionalClusters=3
cellPercentages=[70,20,10]

#INIRANGE EXAMPLE: all are different simulations, we can NOT simulate combinations like several
#clsuters with increasing factors while also changing the #clusters
numberProteinsINIRANGE=1,6,1 #1,2,3,4,5 proteins that differ between clusters
abundanceFactorsINIRANGE=1.5,1.8,0.1 # 1.5, 1.6, 1.7 as a factor for increased proteins abundance: cluster1 has 1.5 more protein than baseline, cluster2 1.6, ...
correlationFactorsINIRANGE=[1.2,1.4,0.1] #same as above but for correlations, correlation can be MAX 1
cellPercentagesINIRNGE=[1,11,1] # RANGE FROM 1 TO 10 PERCENT
#PARAMETERS ONLY USED FOR BENCHMARKING OF SIMULATIONS (TMM,CLR_COMPOSITIONS,SUBSAMPLING,GRAPH,LIBSIZE)
#___________________________________
normMethods=TMM,LIBSIZE,SANITY
batchEffect=0
